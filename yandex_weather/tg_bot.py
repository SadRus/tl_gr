import redis
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    CallbackContext,
    CommandHandler,
    Filters,
    MessageHandler,
    Updater,
)

from .models import Weather
from django.conf import settings


_database = None


def get_weather_keyboard():
    keyboard = [
        [InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', callback_data='weather')]
    ]
    return keyboard


def start(update: Update, context: CallbackContext):
    reply_markup = InlineKeyboardMarkup(get_weather_keyboard())
    update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! '
        '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.',
        reply_markup=reply_markup,
    )
    return 'HANDLE_WEATHER'


def handle_weather(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã,\n'
             '—Å–æ—Å—Ç–∞–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å\n'
             '–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'
    )
    return 'HANDLE_CITY'


def handle_city(update: Update, context: CallbackContext):
    city_name = update.message.text
    reply_markup = InlineKeyboardMarkup(get_weather_keyboard())

    if not Weather.objects.filter(city=city_name).exists():
        update.message.reply_text(
            text='–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n'
                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=reply_markup,
        )
        return 'HANDLE_WEATHER'

    url = 'http://127.0.0.1:8000/api/weather'
    params = {
        'city': city_name,
    }
    response = requests.get(url, params=params)
    response_data = response.json()

    update.message.reply_text(
        text=f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°: {response_data["temperature"]}¬∞–°\n'
             f'–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µüìè: {response_data["pressure"]}–º–º —Ä—Ç.—Å—Ç.\n'
             f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üí®: {response_data["wind_speed"]}–º/—Å',
        reply_markup=reply_markup,
    )
    return 'HANDLE_WEATHER'


def handle_users_reply(update, context):
    db = get_database_connection()

    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return None

    if user_reply == '/start':
        user_state = 'START'
    else:
        user_state = db.get(chat_id).decode("utf-8")

    states_functions = {
        'START': start,
        'HANDLE_CITY': handle_city,
        'HANDLE_WEATHER': handle_weather,
    }
    state_handler = states_functions[user_state]

    try:
        next_state = state_handler(update, context)
        db.set(chat_id, next_state)
    except Exception as err:
        print(err)


def get_database_connection():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Redis, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ,
    –µ—Å–ª–∏ –æ–Ωo –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ωo.
    """

    global _database
    if _database is None:
        database_host = settings.REDIS_HOST
        database_port = settings.REDIS_PORT
        _database = redis.Redis(host=database_host, port=database_port)
    return _database


def main():
    tg_bot_token = settings.TG_BOT_TOKEN

    updater = Updater(tg_bot_token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CallbackQueryHandler(handle_users_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_users_reply))
    dispatcher.add_handler(CommandHandler('start', handle_users_reply))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
